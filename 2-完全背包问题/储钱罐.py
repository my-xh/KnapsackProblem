"""
问题描述
在ACM可以做任何事情之前，必须准备预算并获得必要的财务支持。此操作的主要收入来自不可逆绑定资金（IBM）。背后的想法很简单。每当ACM成员有少量钱时，他都会拿走所有硬币并将它们扔进存钱罐。
您知道此过程是不可逆的，如果不破坏猪就无法取出硬币。经过足够长的时间后，存钱罐中应该有足够的现金来支付所有需要支付的款项。但是存钱罐有一个大问题。无法确定里面有多少钱。
因此，我们可能将这头猪弄成碎片，只是发现没有足够的钱。显然，我们要避免这种不愉快的情况。唯一的可能性是称量存钱罐，然后尝试猜测里面有多少硬币。假设我们能够准确地确定猪的重量，
并且知道给定货币的所有硬币的重量。然后，我们可以保证存钱罐中有一些最低限度的钱。您的任务是找出最坏的情况，并确定存钱罐内的最小现金量。我们需要您的帮助。不再有过早损坏的猪！
 

输入
输入包含T个测试用例。它们的数量（T）在输入文件的第一行上给出。每个测试用例均以包含两个整数E和F的行开头。它们表示空猪和装满硬币的猪的重量。两种重量均以克为单位。
没有猪的体重超过10公斤，这意味着1 <= E <= F <=10000。在每个测试用例的第二行，都有一个整数N（1 <= N <= 500）给出该数字给定货币使用的各种硬币的集合。
紧随其后的是N行，每行指定一种硬币类型。这些行分别包含两个整数，P 和 W（1 <= P <= 50000，1 <= W <= 10000）。P是硬币的货币单位价值，W是重量（克）。
 

输出
对于每个测试用例，仅打印一行输出。该行必须包含句子“存钱罐中的最小金额为X”。其中X是使用给定总重量的硬币可以实现的最小金额。如果无法精确达到重量，请打印一行“这是不可能的”。
 

样本输入
3 

10 110 
2 
1 1 
30 50 

10 110 
2 
1 1 
50 30 

1 6 
2 
10 3 
20 4
 
样本输出
存钱罐中的最小金额为60。
存钱罐中的最小金额为100。
这是不可能的。
"""

T = int(input('T = '))
for i in range(T):
    print('输入:')
    E, F = (int(i) for i in input().split())
    N = int(input())
    P, W = [], []
    for i in range(N):
        p, w = (int(i) for i in input().split())
        P.append(p)
        W.append(w)

    V = F - E
    dp = [float('inf')] * (V + 1)
    dp[0] = 0
    for i in range(len(W)):
        for j in range(W[i], V + 1):
            dp[j] = min(dp[j], dp[j - W[i]] + P[i])

    print('输出:')
    if dp[V] < float('inf'):
        print(f'存钱罐中的最小金额为{dp[V]}。')
    else:
        print('这是不可能的')
