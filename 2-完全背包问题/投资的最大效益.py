"""
题目背景
约翰先生获得了一大笔遗产，他暂时还用不上这一笔钱，他决定进行投资以获得更大的效益。银行工作人员向他提供了多种债券，每一种债券都能在固定的投资后，提供稳定的年利息。
当然，每一种债券的投资额是不同的，一般来说，投资越大，收益也越大，而且，每一年还可以根据资金总额的增加，更换收益更大的债券。

题目描述
例如：有如下两种不同的债券：①投资额4000，年利息4000，年利息400；②投资额3000，年利息3000，年利息250。初始时，有10000的总资产，可以投资两份债券①债券，一年获得10000的总资产，
可以投资两份债券①债券，一年获得800的利息；而投资一份债券①和两份债券②，一年可获得900的利息，两年后，可获得900的利息，两年后，可获得1800的利息；
而所有的资产达到11800，然后将卖掉一份债券②，换购债券①，年利息可达到11800，然后将卖掉一份债券②，换购债券①，年利息可达到1050；
第三年后，总资产达到12850，可以购买三份债券①，年利息可达到12850，可以购买三份债券①，年利息可达到1200，第四年后，总资产可达到$14050。

现给定若干种债券、最初的总资产，帮助约翰先生计算，经过n年的投资，总资产的最大值。

输入格式
第一行为三个正整数s,n,d，分别表示最初的总资产、年数和债券的种类。

接下来d行，每行表示一种债券，两个正整数a,b分别表示债券的投资额和年利息。

输出格式
仅一个整数，表示n年后的最大总资产。

输入输出样例
输入 #1
10000 4 2
4000 400
3000 250
输出 #1
14050
"""

from collections import Counter

print('输入:')
s, n, d = (int(i) for i in input().split())
A, B = [], []
for i in range(d):
    a, b = (int(i) for i in input().split())
    A.append(a)
    B.append(b)

dp = Counter()
last_s = 0
for y in range(n):
    for i in range(d):
        bound = max(A[i], last_s + 1)
        for j in range(bound, s + 1):
            dp[j] = max(dp[j], dp[j - A[i]] + B[i])
    last_s = s
    s += dp[s]
print('输出:')
print(s)
